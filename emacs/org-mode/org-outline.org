[2018-12-25 15:30:08]
* Outlines
org is implemented on top of outline mode.
*org greatly simplifies the use of outlines by compressing the entries show/hide functionality 
into a single command, org-cycle, which is bounded to the TAB key.*

* Headlines
An empty line after the end of a subtree is considered part of it and will be hidden when the subtree is folded. 
However, if you leave at least two empty lines, one empty line will remain visible after folding the subtree, in order to structure the collapsed view.
See the variable =org-cycle-separator-lines= to modify this behavior. 

* Visibility cycling
** Global and local cycling

/TAB/ (=org-cycle=)
Subtree cycling: rotate current subtree among the states (FOLDED, CHILDREN, SUBTREE).
The cursor must be on a headline for this to work.

/S-TAB/ (=org-global-cycle=)
Global cycling: rotate the entire buffer among the states.
When /S-TAB/ is called with a numeric prefix argument N, 
the CONTENTS view up to headlines of level N will be shown. 


/C-u C-u TAB/ (=org-set-startup-visibility=)
Switch back to the startup visibility of the buffer.

/C-u C-u C-u TAB/ (=outline-show-all=)
Show all, including drawers.

/C-c C-r/ (=org-reveal=)
Reveal context around point, showing the current entry, the following heading and the hierarchy above.

/C-c C-k/ (=outline-show-branches=)
Show all subheadings of this heading, but not their bodies.

/C-c TAB/ (=outline-show-children=)
Expose all direct children of the subtree.
With a numeric prefix argument N, expose all children down to level N.

/C-c C-x b/ (=org-tree-to-indirect-buffer=)
Show the current subtree in a indirect buffer.
With a numeric prefix argument N, go up to level N and then take that tree. 
With a C-u prefix, do not remove the previously used indirect buffer. 

/C-c C-x v/ (=org-copy-visible=)
Copy the visible text in the region into the ring.

** Initial visibility
When Emacs first visits an Org file, the global state is set to OVERVIEW, 
i.e., only the top level headlines are visible. 
This can be configured through the variable =org-startup-folded=, 
or on a per-file basis by adding one of the following lines anywhere in the buffer:

#+BEGIN_EXAMPLE
   #+STARTUP: fold              (or ‘overview’, this is equivalent)
   #+STARTUP: nofold            (or ‘showall’, this is equivalent)
   #+STARTUP: content
   #+STARTUP: showeverything
#+END_EXAMPLE

*#+ST C-M-i C-M-i*

Furthermore, any entries with a VISIBILITY property will get their visibility adapted accordingly. 
*curosr on PROPERTIES, C-c C-c V TAB TAB*

** Catching invisible edits
Sometimes you may inadvertently edit an invisible part of the buffer and be confused on 
what has been edited and how to undo the mistake. 
Setting =org-catch-invisible-edits= to non-nil will help prevent this. 

* Motion
| BOUND   | FUNCTION                     |
| C-c C-n | org-next-visible-heading     |
| C-c C-p | org-previous-visible-heading |
| C-c C-f | org-forward-same-level       |
| C-c C-b | org-backward-same-level      |
| C-c C-u | outline-up-heading           |
| C-c C-j | org-goto                     |

* Structure editing
/M-RET/     (=org-insert-heading=)
Insert a new heading, item or row.

If the command is used at the beginning of a line, and if there is a heading or a plain list item at point, the new heading/item is created before the current line. 
When used at the beginning of a regular line of text, turn that line into a heading.

When this command is used in the middle of a line, the line is split and the rest of the line becomes the new item or headline. 
If you do not want the line to be split, customize =org-M-RET-may-split-line=.


/C-RET/ (=org-insert-heading-respect-content=)
Insert a new heading at the end of the current subtree.

/M-S-RET/ (=org-insert-todo-heading=)
Insert new TODO entry with same level as current heading.
See also the variable =org-treat-insert-todo-heading-as-state-change=. 

/C-S-RET/ (=org-insert-todo-heading-respect-content=)
Insert new TODO entry with same level as current heading.
Like /C-RET/ , the new headline will be inserted after the current subtree.

*with Shift, insert TODO headline, without Shift, insert headline*
*Ctrl is with respect content, Meta is without respect content*
/TAB/ (=org-cycle=)
When point is at the beginning of an empty headline and the variable
=org-cycle-level-after-item/entry-creation= is set, cycle the level
of the headline by demoting and promoting it to likely levels.  This
speeds up creation document structure by pressing TAB once or several
times right after creating a new headline.


| M-LEFT    | org-do-promote        | promote current heading by one level     |
| M-RIGHT   | org-do-demote         | demote current heading by one level      |
| M-S-LEFT  | org-promote-subtree   | promote the current subtree by one level |
| M-S-RIGHT | org-demeote-subtree   | demote the current subtree by one level  |
| M-UP      | org-move-subtree-up   | move subtree up                          |
| M-DOWN    | org-move-subtree-down | move subtree down                        |

*<left><right> is promote and demote, <up><down> is move up and down*


/M-h/ (=org-mark-element=)
Mark the element at point.
Hitting repeatedly will mark subsequent elements of the one just mark.

/C-c @/ (=org-mark-subtree=)
Mark the subtree at point.
Hitting repeatedly will mark subsequent subtree of the same level than the marked subtree.

*C-w, M-w, C-y, with C-c C-x prefix, is subtree opearation.*

/C-c C-x C-w/     (=org-cut-subtree=)
Kill subtree, i.e., remove it from buffer but save in kill ring. 
With a numeric prefix argument N, kill N sequential subtrees. 

/C-c C-x M-w/     (=org-copy-subtree=)
Copy subtree to kill ring. 
With a numeric prefix argument N, copy the N sequential subtrees. 

/C-c C-x C-y/     (=org-paste-subtree=)
Yank subtree from kill ring. 
This does modify the level of the subtree to make sure the tree fits in nicely at the yank position. 
The yank level can also be specified with a numeric prefix argument, 
or by yanking after a headline marker like ‘****’. 

/C-c C-x c/     (=org-clone-subtree-with-time-shift=)
Clone a subtree by making a number of sibling copies of it. 
You will be prompted for the number of copies to make, and you can also specify if any timestamps in the entry should be shifted. 
This can be useful, for example, to create a number of tasks related to a series of lectures to prepare.

/C-c C-w/ (=org-refile=)
Refile entry or region to a different location.


/C-c ^/ (=org-sort=)
Sort same-level entries.
When there is an active region, all entries in the region will be sorted. 
Otherwise the children of the current headline are sorted. 
With a C-u prefix, sorting will be case-sensitive. 

/C-x n s/ (=org-narrow-to-subtree=)
Narrow buffer to current subtree.

/C-x n b/ (=org-narrow-to-block=)
Narrow buffer to current block.

/C-x n w/ (=widen=)
Widen buffer to remove narrowing.

/C-c */ (=org-toggle-heading=)
Turn a normal line or plain list item into a headline (so that it becomes a subheading at its location). 
Also turn a headline into a normal line by removing the stars.

* Sparse tress
/C-c // (=org-sparse-tree=)
Construct sparse trees from selected information in an outline tree.

/M-g n/ or /M-g M-n/
Jump to the next sparse tree match in this buffer.

/M-g p/ or /M-g M-p/
Jump to the previous sparse tree match in this buffer.

[2018-12-26 00:59:16]
* Plain list
Org knows ordered lists, unorderded lists, and description lists.
1) /unordered/ list start with '-' or '+' as bullets.
2) /ordered/ list items star with a number followed by either a period or a right parenthesis.
3) /description/ list items are unorderded list items, and contain the separator ' :: ' to distinguish the description /term/ from the description.

If you find that using a different bullet for a sub-list improves readability, customize the variable =org-list-demote-modify-bullet= . 
To get a greater difference of indentation between items and their sub-items, customize =org-list-indent-offset= . 


/TAB/ (=org-cycle=)
Items can be folded just like headline levels.
In a new item with no text yet, the first /TAB/ demotes the item to become a child of the previous one. 
Subsequent /TAB/ move the item to meaningful levels in the list and eventually get it back to its initial position. 
Just like headline.


/M-RET/ (=org-insert-heading=)
Insert new item at current level.

/M-S-RET/
Insert a new item with a checkbox.

/S-UP/ /S-DOWN/
Jump to the previous/next item in the current list.

/M-UP/ /M-DOWN/
Move the item including subitems up/down.

/M-LEFT/ /M-RIGHT/
Decrease/increase the indentation of an item, leaving children alone.

/M-S-LEFT/ /M-S-RIGHT/
Decrease/increase the indentation of an item, including subitems.

/C-c C-c/
If there is a checkbox in the item line, toggle the state of the checkbox.
In any case, verify bullets and indentation consistency in the whole list.


/C-c -/
Cycle the entire list level through the different itemizer/enumerate bullets.
If there is an active region, all selected lines are converted to list items.
With a prefix argument, selected text is changed into a single item.
If the first line already was a list item, any item marker will be removed from the list.
Even without an active region, a normal line will be converted into a list item.


/C-c */
Turn a plain list item into a headline.


/C-c C-*/
Turn the whole plain list into a subtree of the current heading.

/C-c ^/
Sort the plain list.

* Blocks
Org mode uses begin...end blocks for various purposes from including source code examples to capturing time logging information. 
     #+BEGIN_EXAMPLE
     Some example from a text file.
     #+END_EXAMPLE

     #+BEGIN_SRC emacs-lisp
       (defun org-xor (a b)
          "Exclusive or."
          (if a (not b) b))
     #+END_SRC
These blocks can be folded and unfolded by pressing <TAB> in the begin line. 
You can also get all blocks folded at startup by configuring the option =org-hide-block-startup= or on a per-file basis by using
     #+BEGIN_EXAMPLE
     #+STARTUP: hideblocks
     #+STARTUP: nohideblocks
     #+END_EXAMPLE


* Footnote
A footnote is started by a footnote marker in square brackets in column 0, no indentation allowd.
For example:

#+BEGIN_EXAMPLE
The Org homepage[fn:1] now looks a lot better than it used to.
...
[fn:1] The link is: https://orgmode.org
#+END_EXAMPLE

Org mode extends the number-based syntax to /named/ footnotes and optional inline definition.


#+BEGIN_EXAMPLE
[fn:name]
[fn:name:a definition]
[fn::this is the inline defintion of this footnote]
#+END_EXAMPLE

/C-c C-x f/
org-footnote-action
When at a footnote reference, jump to the definition.
When at a definition, jump to the references if they exist, offer to create them otherwise.
When neither at definition or reference, create a new footnote, interactively.
With prefix, offer additional commands in a menu. (/C-u C-c C-x f/)

* Org syntax
To explore the abstract structure of an Org buffer, run this in a buffer:
=M-: (org-element-parse-buffer) <RET>=

| M-: | eval-expression |


