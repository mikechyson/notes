* problem
Input: A sequence of numbers $(a_1,a_2,\cdots,a_n)$
Output: A permutation (reordering) $(a_1^{'},a_2^{'},\cdots,a_n^{'})$ of the input sequence such that $a^{'}_1 \le a^{'}_2 \le \cdots \le a_n^{'}$


* case



* pseudocode
Auxiliary function

#+BEGIN_EXAMPLE
MERGE(A, p, q, r)
#+END_EXAMPLE
* loop invariant
We use loop invariant to help us to understand why an algorithm is correct.

Initialization: It is true prior to the first iteration of the loop.
Maintanance:    If it is true before an iteration of the loop, it remains true before the next iteration.
Termination:    When the loop terminates, the invariant gives us a useful property that helps show that the algorithm is correct.



Initialization: When $j = 2$ , the subarray $A[1..j-1]$ consists of just the single element $A[1]$ .
                This subarray is sorted.

Maintanance: The body of the *for* loop works by moving $A[j-1], A[j-2], A[j-3]$ , and so on by one position to the right
             until it finds the proper position for $A[j]$ , at which point it inserts the value of $A[j]$ .
	     The subarray $A[1..j]$ the consists of the elements originally in $A[1..j]$ , but in sorted order.

Termination: The condition causing the *for* loop to terminate is that $j > A.length = n$ .
             That is $j = n + 1$ . Substituting $n+1$ for $j$ in the wording of loop invariant, We have that the subarray
	     $A[1..n]$ consists of the elements originally in $A[1..n]$ , but in sorted order.


* python
#+BEGIN_SRC python
def insertion_sort(lst):
    for j in range(1, len(lst)):
        key = lst[j]
        # Insert A[j] into the sorted sequence A[1..j-1]
        i = j - 1
        while i > -1 and lst[i] > key:
            lst[i + 1] = lst[i]
            i = i - 1
        lst[i + 1] = key
    print(lst)


test = [4, 2, 5, 9, 0, 11, 20, 13]
insertion_sort(test)  # [0, 2, 4, 5, 9, 11, 13, 20]
#+END_SRC


* analysis of insertion sort
In general, the time grows with the size of the input, so it is traditional to describe the running time as the function of the size of its input.

Assumption for simpler analysis:
A constant amount of time is requried to execute each line of the pseudocode.


[[file:pics/insertion-sort-analysis.png]]

Let $t_j$ denote the number of times the while loop test.
This is a abstraction thought.

\begin{equation}
T(n) = c_1n + c_2(n-1) + c_4(n-1) + c_5\sum_{j=2}^{n}t_j + c_6\sum_{j=2}^{n}(t_j-1) + c_7\sum_{j=2}^{n}(t_j-1) + c_8(n-1)
\end{equation}


** best-case analysis
If the array is already sorted.
For each $j=2,3,\cdots,n$ , we then find that $A[i] \le key$ when i havs its initial value of $j-1$ .
Thus $t_j = 1$ for $j=2,3,\cdots,n$ 

\begin{equation}
T(n) = c_1n + c_2(n-1) + c_4(n-1) + c_5(n-1) + c_8(n-1) \\
= an + b
\end{equation}



** worst-case analysis
If the array is reverse sorted.

We must compare each element  $A[j]$  with each element in the entire sorted array $A[1..j-1]$ , 
and so $t_j = j$ for $j=2,3,\cdots,n$ .

\begin{equation}
\sum_{j=2}^{n}j = \frac{n(n+1)}{2} - 1
\end{equation}

and

\begin{equation}
\sum_{j=2}^{n}(j-1) = \frac{n(n-1)}{2}
\end{equation}

$$
T(n) = c_1n + c_2(n-1) + c_4(n-1) + c_5(\frac{n(n+1)}{2}-1) + c_6( \frac{n(n-1)}{2}) + c_7( \frac{n(n-1)}{2}) + c_8(n-1) \\
$$
$$
= (\frac{c_5}{2} + \frac{c_6}{2} + \frac{c_7}{2})n^2 + (c_1 + c_2 + c_4 + \frac{c_5}{2} - \frac{c_6}{2} - \frac{c_7}{2} + c_8)n - (c_2 + c_4 + c_5 + c_8)
$$
$$
= an^2 + bn + c
$$
