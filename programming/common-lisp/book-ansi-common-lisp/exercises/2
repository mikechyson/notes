(progn (load "/home/able/.emacs.d/elpa/slime-2.22/swank-loader.lisp" :verbose t) (funcall (read-from-string "swank-loader:init")) (funcall (read-from-string "swank:start-server") "/tmp/slime.28155"))

This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* 
; loading #P"/home/able/.emacs.d/elpa/slime-2.22/swank-loader.lisp"
WARNING:
   redefining EMACS-INSPECT (#<SB-PCL:SYSTEM-CLASS COMMON-LISP:T>) in DEFMETHOD
;; Swank started at port: 38879.
38879
* (+ (- 5 1) (+ 3 7))

14
* (list 1 (+ 2 3))

(1 5)
* (if (listp 1)
      (+ 1 2)
    (+ 3 4))

7
* (list (and (listp 3) t) (+ 1 2))

(NIL 3)
* (cons 'a '(b c))

(A B C)
* (cons '(a b) '(c))

((A B) . C)

* (cons 'a (cons 'b '(c)))

(A B . C)
* (cons 'a (cons 'b '(c)))

(A B C)
* (cons '(a b) '(c))

((A B) C)
* (cons '(a b c) nil)

((A B C))
* (cons 'a (cons 'b (cons 'c nil)))

(A B C)
* (defun my-fourth (lst)
    (car (cdr (cdr (cdr lst)))))

MY-FOURTH
* (my-fourth '(1 2 3 4 5))

4
* (defun greater-one (num1 num2)
    (if (> num1 num2)
        num1
      num2))

GREATER-ONE
* (greater-one 3 4)

4
* (defun enigma (x)
    (and (not (null x))
         (or (null (car x))
             (engima (cdr x)))))
; in: DEFUN ENIGMA
;     (ENGIMA (CDR X))
; 
; caught STYLE-WARNING:
;   undefined function: ENGIMA
; 
; compilation unit finished
;   Undefined function:
;     ENGIMA
;   caught 1 STYLE-WARNING condition

ENIGMA
* (enigma nil)

* (enigma nil)

NIL
* (enigma '(nil))

* (enigma '((1)))

T
* (enigma '((1)))

* (enigma '((1 2) nil))

 (defun enigma (x)
    (and (not (null x))
         (or (null (car x))
             (enigma (cdr x)))))

0
  C-c C-c
* WARNING: redefining COMMON-LISP-USER::ENIGMA in DEFUN

ENIGMA
* 
0
*  (defun enigma (x)
    (and (not (null x))
         (or (null (car x))
             (enigma (cdr x)))))
WARNING: redefining COMMON-LISP-USER::ENIGMA in DEFUN

ENIGMA
* (enigma nil)

NIL
* (enigma '(1))

T
* (enigma '(1))

NIL
* (enigma '(nil))

T
* (defun mystery (x y)
    (if (null y)
        nil
      (if (eql (car y) x)
          0
        (let ((z (mystery x (cdr y))))
          (and z (+ z 1))))))

MYSTERY
* (mystery 4 '(1 2 3 4 5))

3
* (car (b (cdr '(a (b c) d))))
; in: CAR (B (CDR '(A (B C) D)))
;     (B (CDR '(A (B C) D)))
; 
; caught STYLE-WARNING:
;   undefined function: B
; 
; compilation unit finished
;   Undefined function:
;     B
;   caught 1 STYLE-WARNING condition

* (car ('b (cdr '(a (b c) d))))
; in: CAR ('B (CDR '(A (B C) D)))
;     ('B (CDR '(A (B C) D)))
; 
; caught ERROR:
;   illegal function call
; 
; compilation unit finished
;   caught 1 ERROR condition

* (cdr '(a (b c) d))

((B C) D)
* (or 13 (/ 1 0))

13
* (quote #'list 1 nil)

* (#'list 1 nil)
; in: #'LIST 1
;     (#'LIST 1 NIL)
; 
; caught ERROR:
;   illegal function call
; 
; compilation unit finished
;   caught 1 ERROR condition

* (funcall #'list 1 nil)

(1 NIL)
* (car #'list 1 nil)

* (apply #'list 1 nil)

(1)
* (defun my-listp (lst)
    (if (null lst)
        nil
      (if (listp (car lst))
          t
        (my-listp (cdr lst)))))

MY-LISTP
* (my-listp '(1 2 3))

NIL
* (my-listp '(1 2 nil))

T
* (my-listp '(1 2 (a) 3))

T
* (defun my-dot (num)
    (do ((i 0 (i+1)))
        ((> i num) 'done)
        (format t "~A" ".")))
; in: DEFUN MY-DOT
;     (I+1)
; 
; caught STYLE-WARNING:
;   undefined function: I+1
; 
; compilation unit finished
;   Undefined function:
;     I+1
;   caught 1 STYLE-WARNING condition

MY-DOT
* (defun my-dot (num)
    (do ((i 0 (+ i1)))
        ((> i num) 'done)
        (format t "~A" ".")))
; in: DEFUN MY-DOT
;     (+ I1)
; --> VALUES PROG1 LET 
; ==>
;   (THE NUMBER I1)
; 
; caught WARNING:
;   undefined variable: I1
; 
; compilation unit finished
;   Undefined variable:
;     I1
;   caught 1 WARNING condition
WARNING: redefining COMMON-LISP-USER::MY-DOT in DEFUN

MY-DOT
* (defun my-dot (num)
    (do ((i 0 (+ i 1)))
        ((> i num) 'done)
        (format t "~A" ".")))
WARNING: redefining COMMON-LISP-USER::MY-DOT in DEFUN

MY-DOT
* (my-dot 10)
...........
DONE
* (defun my-dot-r (num)
    (if (= num 0)
        'done
      (progn
        (format t "~A" ".")
        (my-dot-r (- num 1)))))

MY-DOT-R
* (my-dot-r 10)
..........
DONE
* (defun my-occur (lst)
    (let ((num 0))
      (dolist (obj lst)
        (if (eql 'a obj)
            (setf num (+ num 1))
          num))
      num))

MY-OCCUR
* (my-occur '(a b c a d a nil))

3
* (defun my-occur-r (lst)
    (if (null lst)
        0
      (+ (my-occur-r (cdr lst)) 1)))

MY-OCCUR-R
* (my-occur-r '(a b c a d a nil))

7
* (defun my-occur-r (lst)
    (if (null lst)
        0
      (if (eql 'a (car lst))
          (+ (my-occur-r (cdr lst)) 1)
      (if (eql 'a (car lst))
      (if (eql 'a (car lst))
  C-c C-c
* (defun my-occur-r (lst)
    (if (null lst)
        0
      (let ((num 0))
        (if (eql 'a (car lst))
            (setf num (+ (my-occur-r (cdr lst)) 1)))
            (setf num (+ (my-occur-r (cdr lst)) 1)))
      num))
(my-occur-r '(1 a b a b a nil))
  C-c C-c
* (defun my-occur-r (lst)
    (if (null lst)
        0
      (let ((num 0))
        (if (eql 'a (car lst))
            (setf num (+ (my-occur-r (cdr lst)) 1)))
      num))
  C-c C-c
* (defun my-occur-r (lst)
    (if (null lst)
        0
      (if (eql 'a (car lst))
          (+ (my-occur-r (cdr lst)))
        (my-occur-r (cdr)))))
; in: DEFUN MY-OCCUR-R
;     (CDR)
; 
; caught WARNING:
;   The function was called with zero arguments, but wants exactly one.
; 
; compilation unit finished
;   caught 1 WARNING condition
WARNING: redefining COMMON-LISP-USER::MY-OCCUR-R in DEFUN

MY-OCCUR-R
* (defun my-occur-r (lst)
    (if (null lst)
        0
      (if (eql 'a (car lst))
          (+ (my-occur-r (cdr lst)))
        (my-occur-r (cdr lst)))))
WARNING: redefining COMMON-LISP-USER::MY-OCCUR-R in DEFUN

MY-OCCUR-R
* (my-occur-r '(1 a b a b a nil))

0
* (defun my-occur-r (lst)
    (if (null lst)
        0
      (if (eql 'a (car lst))
          (+ (my-occur-r (cdr lst)))
        0)))
WARNING: redefining COMMON-LISP-USER::MY-OCCUR-R in DEFUN

MY-OCCUR-R
* (my-occur-r '(1 a b a b a nil))

0
* (defun my-occur-r (lst)
    (if (null lst)
        0
      (if (eql 'a (car lst))
          (+ (my-occur-r (cdr lst) 1))
        0)))
; in: DEFUN MY-OCCUR-R
;     (MY-OCCUR-R (CDR LST) 1)
; 
; caught WARNING:
;   The function was called with two arguments, but wants exactly one.
; 
; compilation unit finished
;   caught 1 WARNING condition
WARNING: redefining COMMON-LISP-USER::MY-OCCUR-R in DEFUN

MY-OCCUR-R
* (my-occur-r '(1 a b a b a nil))

0
* (defun my-occur-r (lst)
    (if (null lst)
        0
      (if (eql 'a (car lst))
          (+ (my-occur-r (cdr lst)) 1)
        0)))
WARNING: redefining COMMON-LISP-USER::MY-OCCUR-R in DEFUN

MY-OCCUR-R
* (my-occur-r '(1 a b a b a nil))

0
* (defun my-occur-r (lst)
    (if (null lst)
        0
      (if (eql 'a (car lst))
          (+ (my-occur-r (cdr lst)) 1)
        (my-occur-r (cdr lst)))))
WARNING: redefining COMMON-LISP-USER::MY-OCCUR-R in DEFUN

MY-OCCUR-R
* (my-occur-r '(1 a b a b a nil))

3
* (defun summit (lst)
    (setf remove nil lst)
    (apply #'+ lst))
; in: DEFUN SUMMIT
;     (SETF REMOVE NIL
;           LST)
; 
; caught ERROR:
;   during macroexpansion of
;   (SETF REMOVE NIL
;         LST).
;   Use *BREAK-ON-SIGNALS* to intercept.
;   
;    odd number of args to SETF: (SETF REMOVE NIL
;                                      LST)
; 
; compilation unit finished
;   caught 1 ERROR condition

SUMMIT
* (defun summit (lst)
    (setf (remove nil lst))
    (apply #'+ lst))
; in: DEFUN SUMMIT
;     (SETF (REMOVE NIL LST))
; 
; caught ERROR:
;   during macroexpansion of (SETF #). Use *BREAK-ON-SIGNALS* to intercept.
;   
;    error while parsing arguments to DESTRUCTURING-BIND:
;      too few elements in
;        ((REMOVE NIL LST))
;      to satisfy lambda list
;        (SB-IMPL::PLACE SB-IMPL::VALUE-FORM . SB-IMPL::MORE):
;      at least 2 expected, but got 1
; 
; compilation unit finished
;   caught 1 ERROR condition
WARNING: redefining COMMON-LISP-USER::SUMMIT in DEFUN

SUMMIT
* (defun summit (lst)
    (setf lst (remove nil lst))
    (apply #'+ lst))
WARNING: redefining COMMON-LISP-USER::SUMMIT in DEFUN

SUMMIT
* (summit '(1 2 3 nil 4 nil nil 3))

13
* (defun summit (lst)
    (remove nil lst)
    (apply #'+ lst))
WARNING: redefining COMMON-LISP-USER::SUMMIT in DEFUN

SUMMIT
* (summit '(1 2 3 nil 4 nil nil 3))

*     (apply #'+ lst))

* (defun summit (lst)
    (setf lst (remove nil lst))
    (apply #'+ lst))

* WARNING: redefining COMMON-LISP-USER::SUMMIT in DEFUN

SUMMIT
* (defun summit (lst)
    (remove nil lst)
    (apply #'+ lst))
WARNING: redefining COMMON-LISP-USER::SUMMIT in DEFUN

SUMMIT
* (summit '(1 2 3 nil 4 nil nil 3))

* (defun summit (lst)
    (setf lst (remove nil lst))
    (apply #'+ lst))
WARNING: redefining COMMON-LISP-USER::SUMMIT in DEFUN

SUMMIT
* (summit '(1 2 3 nil 4 nil nil 3))

13
* (defun summit (lst)
    (let ((x (car lst)))
      (if (null x)
          (summit (cdr lst))
        (+ x (summit (cdr lst))))))
WARNING: redefining COMMON-LISP-USER::SUMMIT in DEFUN

SUMMIT
* (summit '(1 2 3 nil 4 nil nil 3))


  C-c C-c
* (car nil)

NIL
* (cdr nil)

NIL
* (defun summit (lst)
    (if (null lst)
        0
      (let ((x (car lst)))
        (if (null x)
            (summit (cdr lst))
          (+ x (summit (cdr lst)))))))
WARNING: redefining COMMON-LISP-USER::SUMMIT in DEFUN

SUMMIT
* (summit '(1 2 3 nil 4 nil nil 3))

13
* 