* .elc
byte compiled code is usualy stored in a file that ends with a .elc extension.


* list
'(this list has (a list inside of it))

* atom
words, cannot be divided into any smaller parts.
multi-character symbols, single character symbols, strings of characters between double quotation marks, numbers

* empty list
()
both an atom and a list

* s-expression
symbolic expression: atoms + lists

* whitespace
extra whitespace and newlines designed for readable.


* program
a list is a program.
run it, the computer will do one of:
1. do nothing except return the list itself
2. send an error message
3. treat the first symbol in the list as a command to do sth

* quote
the single apostrophe(') in front of lists

when it precede a list, it tells Lisp to do nothing
no quote preceding a list, the first item is a command(funtion) for the computer to obey


* lisp interperter
the program inside of GNU Emacs.
the Lisp interpreter translates from the humanly readable expression to the language of the computer.

* error message
Once you understand the jargon, error message can be informative.

The error message is generated by a built-in GNU Emacs debugger.

* function
a set of instructions that tell the computer to do sth.

a function always returns a value when it is evaluated(unless it gets an error); in addition, it may also carry out some action that is a side effect.
In many cases, a function's primary purpose is to create a side effect.

* variable
A value is something, such as number or a name, that vary(which is why such a symbol is called variable).
A symbol that has a value is often called a variable.

* symbol
I can be reffered to as 'michael', but, I am not the letter 'm','i','c','h','a','e','l', but am or was, the consciousness consistently associated with a particular life-form.
The name is not me, but it can be used to refer to me.

a symbol can have only one function definition attached to it as a time.


* evaluation
the lisp interpreter works on an expression.
a number evaluates to itself
a string between double quotes evalutes to itself
a symbol by itself, its value is returned
a list, the first symbol is a function

* side effect
At the time the interpreter returns a value, it may do something else as well, such as move a cursor or copy a file; this other kind of action is called side effect.

* symbol
A symbol can have any value attatched to it or, to use jargon, we can bind the variable to a value.

* argument
(+ 2 2)
the numbers added by the + are called the arguments of the function +.
these numbers are the information that is given to or passed to the function.

the word "argument" comes from the way it is used in mathematics.
it refers to the information presented to the function.

in lisp, the arguments of a function are the atoms or lists that follow the function.


* lisp program
made up of expressions, which are lists or single atoms.

* '
a single quote ' tells the lisp interpreter that is should return the following expression as written.

* emacs
whenever you give an editing command to emacs lisp, you are evaluating an expression. This is how emacs works.

* file
information recorded permanently in the computer(unless you delete it)

* buffer
information inside of emacs that will vanish at the end of the editing session(or when you kill the buffer) 

a buffer contains information that copied from a file.
this copy is what you work on and modify.

* nil
the symbol nil is from the Latin word for "nothing".


* symbol and entity
a name and the object or entity to which the name refers are different from each other.
you are not your name.
you are a person to whom others refer by name.


* call
when you evaluate a list in which the first symbol is a function, you are calling that function.
the use of term comes from the notion of the function as an entity that can do something for you if you call it.

* point
the current location of the cursor.
* mark
another position in the buffer that can be set.
mark can be saved in mark ring.
* region
the part of the buffer between point and mark.
* function
a symbol that has a function definition

* primitive functions
written in C programming language
so we can easily run emacs on computers that can run C.

* function definition
the code attached to a symbol

* defun
(defun function-name (arguments...)
    "optional-documentation..."
     (interactive argument-passing-info)     ; optional
     body...)


* install a function definition
evaluate the defun

* commemt
text that a lisp interpreter ignores
everything on a line that follows a semicolon is a comment

* scoping
in emacs lisp, scoping is dynamic, not lexical.

* let
attach or bind a symbol to a value in such a way that the Lisp interpreter will not confuse the variable with a variable of the same name that is not part of the function.

local variables created by a let expression retain their value only within the let expression itself.

** template
(let varlist body...)

(let ((variable value)
      (variable value)
      ...)
     body...)

symbols by themselves are given the initial value of nil.

* if
instruct the computer to make decisions.

basic idea:
if a test is true, then an expression is evaluated;
if the test is not true, the expression is not evaluated.

(if true-or-false-test			;if-part
    action-to-carry-out-if-test-is-true) ;then-part

(if true-or-false-test			;if-part
    action-to-carry-out-if-test-is-true) ;then-part
  action-to-carry-out-if-the-test-returns-false) ;else-part

* nil
the expression that tests for truth is interpreted as true if the result of evaluatiing it is a value that is not nil.
 meaning:
 1. the empty list
 2. false

* save-excursion
Record the values of point and the current buffer before evaluating the body of this special form. Restore the value of point and buffer afterward.

purpose: to keep the user from being surprised and disturbed by unexpected movement of point.



(save-excursion
  body...)

(save-excursion
  first-expression-in-body
  second-expression-in-body
  third-expression-in-body
  ...
  last-expression-in-body)


* transient mark mode
transient mark mode highlights the currently active region.


* optional argument
optional arguments are a feature of Lisp.
a particular keyword is used to tell the Lisp interpreter that an argument is optional.
The keyword is &optional


* fundamental functions: cons, car, cdr (name for history reason)
cons: construct
car: Contents of the Address part of the Register
cdr: (could-er) Contents of the Decrement part of the Register

* kill ring
the list that holds the pieces of text.

whenever you cut or clip text out of a buffer with a kill command, it is stored in a list 
and you can bring it back with a yank command.
for historical accident, "kill" in emacs means "clip".


* condition-case
** template
     (condition-case
       var
       bodyform
       error-handler...)

takes three arguments
** first argument:
if it is nil, information about the error singal is not stored for use by another function.
** second argument:
tells the Lisp interpreter what to do when all goes well.
** third argument:
tells the interpreter what to do with an error.

an error handler has two parts, a condition-name and a body.
If the condition-name part of an error handler matches a condition name generated by an error,
then the body part of the error handler is run.

* when

(when COND BODY...)

If COND yields non-nil, do BODY, else return nil.
When COND yields non-nil, eval BODY forms sequentially and return
value of last one, or nil if there are none.

* lisp macro
"when" is a lisp macro.
A lisp macro enables you to define new control constructs and other language features.
"unless" is a macro.


* list
a list is kept using a series of paries of pointers.
a pointer itself is the electronic address of what is pointed to.

(rose violet buttercup)

[[file:list-diagram.png]]
each box represents a word of computer memory that holds a Lisp object, 
usually in the form of a memory address. 
The boxes, i.e., the addresses, are in pairs. 
Each arrow points to what the address is the address of, 
either an atom or another pair of addresses.

** When a variable is set to a list:
[[file:setq-list.png]]
** car and cdr are non-destructive
If a symbol is set to the cdr of a list, the list itself is not changed; 
the symbol simply has an address further down the list. 
(In the jargon, car and cdr are “non-destructive”.) 

[[file:car-cdr-non-destructive.png]]

** cons
[[file:cons-list.png]]


* Symbols
a symbol as a chest of drawers.
what is put in each drawer is the address of the value or function definition.

* loops and recursion
emacs lisp has two primary ways to cause an expression, or a series of expressions, to be evaluated repeatedly: one uses a 'while' loop, and the other uses recursion.


* recursion and robot(metaphor)
A recursion function contains code that tells the lisp interpreter to call a program that runs exactly like itself, but with slightly different arguments.
The code runs exactly the same because it has the same name.
Even though the program has the same name, it is not the same entity.
In the jargon, it is different 'instance'.

It is sometimes helpful to think of a running program as a robot that does a job.
In doing its job, a recursive function calls on a second robot to help it.
The second robot is identical to the first in every way, except that the second robot helps the first and has been passed different arguments than the first.

A function definition provides the blueprints for a robot. When you install a function definition, that is, when you evaluate a defun macro, you install the necessary equipment to build robots.



* marker
a specific feature of elisp.
locations in a buffer are recorded as markers.
when the marker is set with the C-@ or C-<SPC> command, its position is kept as a marker.
The mark can be considered a number - the number of characters the location is from the beginning of the buffer.

* quote and '
(quote hello) = 'hello

* evaluation, return, side effect
(setq carnivores '(lion tiger leopard))   evaluation
(line tiger leopard)   returned value
carnivores  ----->   (line tiger leopard)    side effect



* function
** defun
define function

** argument in defun
a name in a argument list is private to the function definition.
arguments are placed in parentheses to tell the lip interpreter where the arguments start and end.

** documentation string
what you see when you type C-h f

** apropos
print only the fitst line of the multi-line documentation string


** chang a function definition
re-evaluate it

** write code in emacs lisp
write a function
install it
test it
make fixes or enhancement
intall it again


** interactive
*** position
placing a list that begins with interactive immediately after the documentation.
*** common use
often you call an interactive function for its side effects.

*** option
(interactive "p\ncZap to char: ")
p: the numberic prefix argument
c: the character
\n: a newline sperating different arguments

b: the name of an existing buffer
f: the name of an existing file
r: point and mark, as two numberic arguments, smallest first
(interactive)
take no arguments



** invoke a function in emacs
1. M-x function-name
2. keychord that the function is bound to


** install code permanently
1. .emacs initialization file. When emacs is started, .emacs file is automatically evaluated.
2. use the load function.
3. put it in site-init.el file that is loaded when emacs is built. if you have code that your whole site will use.


* interactive and M-x
it must include an expression that makes the function interactive so it can be called by typing M-x beginning-of-buffer or by tying a keychord such as M-<



* while
(while true-of-false-test
  body...)

the value returned by evaluating a 'while' is the value of the true-or-false-test.
an interesting consequence of this is that a 'while' loop that evaluates without error will return nil or false.

What this means is that while is always evaluated for its side effects.


* cond
(cond
 body...)

(cond
  (first-true-or-false-test first-consequent)
  (second-true-or-false-test second-consequent)
  (third-true-or-false-test third-consequent)
   ...)


* fill prefix
A fill prefix consists of a string of characters that are repeated at the beginning of each line.


